on:
  push:
    tags:
      - '*'

name: Build & release

jobs:

  alpine-builds:
    strategy:
      matrix:
        # arch: [amd64, arm64]
        arch: [amd64]
    name: alpine builds
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
      - name: Set src directory
        run: echo "::set-output name=srcdir::$(pwd)"
        id: pwd
      - uses: docker/setup-qemu-action@v1
      - name: Build in qemu
        run: |
          echo ${{ steps.pwd.outputs.srcdir }}
          docker run --rm -v ${{ steps.pwd.outputs.srcdir }}:/src -w /src --entrypoint /bin/sh --platform linux/${{ matrix.arch }} golang:alpine -c "apk add --no-cache gcc g++ && \
          go build -buildvcs=false -ldflags '-s -w'"
      - name: Create archive
        run: |
          tar -zcvf golp_alpine_${{ matrix.arch }}.tar.gz golp README.md LICENSE
      - name: Upload archive to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: golp_alpine_${{ matrix.arch }}.tar.gz
          asset_name: golp_alpine_${{ matrix.arch }}.tar.gz
          overwrite: true
          tag: ${{ github.ref }}

  # armv7_job:
  #   # The host should always be Linux
  #   runs-on: ubuntu-18.04
  #   name: Build on ubuntu-18.04 armv7
  #   steps:
  #     - uses: actions/checkout@v2.1.0
  #     - uses: uraimo/run-on-arch-action@v2
  #       name: Run commands
  #       id: runcmd
  #       with:
  #         arch: armv7
  #         distro: alpine_latest

  #         # Not required, but speeds up builds by storing container images in
  #         # a GitHub package registry.
  #         githubToken: ${{ github.token }}

  #         # Set an output parameter `uname` for use in subsequent steps
  #         run: |
  #           apk addgo  git gcc g++
  #           go build -ldflags "-s -w" .
  #           tar -zcvf golp_alpine_armv7.tar.gz golp README.md LICENSE
  #           ls -lh

      # - name: Get the output
      #   # Echo the `uname` output parameter from the `runcmd` step
      #   run: |
  # linux:
  #   strategy:
  #     matrix:
  #       go-version: [1.18.x]
  #       os: [ubuntu-latest]
  #       goarch: ["386", amd64, arm64]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/setup-go@v3
  #     with:
  #       go-version: ${{ matrix.go-version }}
  #   - name: Get tag
  #     id: tag
  #     uses: dawidd6/action-get-tag@v1
  #   - uses: actions/checkout@v3
  #   - run: go build -ldflags '-s -w -X "github.com/axllent/golp/cmd.Version=${{ steps.tag.outputs.tag }}"'
  #     env:
  #       CGO_ENABLED: 1
  #   - run: tar -zcvf golp_alpine_${{ matrix.goarch }}.tar.gz golp README.md LICENSE
  #   - name: Upload binaries to release
  #     uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{ secrets.GITHUB_TOKEN }}
  #       file: golp_alpine_${{ matrix.goarch }}.tar.gz
  #       asset_name: golp_alpine_${{ matrix.goarch }}.tar.gz
  #       overwrite: true
  #       tag: ${{ github.ref }}

  # darwin:
  #   strategy:
  #     matrix:
  #       go-version: [1.18.x]
  #       os: [macos-latest]
  #       goarch: [amd64, arm64]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/setup-go@v3
  #     with:
  #       go-version: ${{ matrix.go-version }}
  #   - name: Get tag
  #     id: tag
  #     uses: dawidd6/action-get-tag@v1
  #   - uses: actions/checkout@v3
  #   - run: go build -ldflags '-s -w -X "github.com/axllent/golp/cmd.Version=${{ steps.tag.outputs.tag }}"'
  #     env:
  #       CGO_ENABLED: 1
  #   - run: tar -zcvf golp_darwin_${{ matrix.goarch }}.tar.gz golp README.md LICENSE
  #   - name: Upload binaries to release
  #     uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{ secrets.GITHUB_TOKEN }}
  #       file: golp_darwin_${{ matrix.goarch }}.tar.gz
  #       asset_name: golp_darwin_${{ matrix.goarch }}.tar.gz
  #       overwrite: true
  #       tag: ${{ github.ref }}

  # windows:
  #   strategy:
  #     matrix:
  #       go-version: [1.18.x]
  #       os: [windows-latest]
  #       goarch: ["386", amd64]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/setup-go@v3
  #     with:
  #       go-version: ${{ matrix.go-version }}
  #   - uses: actions/checkout@v3
  #   - name: Get tag
  #     id: tag
  #     uses: dawidd6/action-get-tag@v1
  #   - run: go build -ldflags '-s -w -extldflags "-static" -X "github.com/axllent/golp/cmd.Version=${{ steps.tag.outputs.tag }}"'
  #     env:
  #       CGO_ENABLED: 1
  #   - run: go build -ldflags "-s -w" .
  #   - name: Compress zip files
  #     uses: papeloto/action-zip@v1
  #     with:
  #       files: golp.exe README.md LICENSE
  #       dest: golp_windows_${{ matrix.goarch }}.zip
  #   - name: Upload binaries to release
  #     uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{ secrets.GITHUB_TOKEN }}
  #       file: golp_windows_${{ matrix.goarch }}.zip
  #       asset_name: golp_windows_${{ matrix.goarch }}.zip
  #       overwrite: true
  #       tag: ${{ github.ref }}
